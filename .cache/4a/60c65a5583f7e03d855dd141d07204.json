{"id":"node_modules/rxjs/operator/skip.js","dependencies":[{"name":"C:\\Users\\pooya\\Desktop\\poomap\\node_modules\\rxjs\\operator\\skip.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\pooya\\Desktop\\poomap\\package.json","includedInParent":true,"mtime":1594932269761},{"name":"C:\\Users\\pooya\\Desktop\\poomap\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1594932268869},{"name":"../operators/skip","loc":{"line":2,"column":21},"parent":"C:\\Users\\pooya\\Desktop\\poomap\\node_modules\\rxjs\\operator\\skip.js","resolved":"C:\\Users\\pooya\\Desktop\\poomap\\node_modules\\rxjs\\operators\\skip.js"}],"generated":{"js":"\"use strict\";\nvar skip_1 = require('../operators/skip');\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nfunction skip(count) {\n    return skip_1.skip(count)(this);\n}\nexports.skip = skip;\n"},"sourceMaps":{"js":{"version":3,"file":"skip.js","sourceRoot":"","sources":["../../src/operator/skip.ts"],"names":[],"mappings":";AACA,qBAAoC,mBAAmB,CAAC,CAAA;AAExD;;;;;;;;;;GAUG;AACH,cAA6C,KAAa;IACxD,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,IAAI,CAAkB,CAAC;AACnD,CAAC;AAFe,YAAI,OAEnB,CAAA","sourcesContent":["import { Observable } from '../Observable';\nimport { skip as higherOrder } from '../operators/skip';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n"]}},"error":null,"hash":"c2d90f7dac77a2cd7aa2699140016251","cacheData":{"env":{}}}