{"id":"node_modules/chardet/encoding/utf8.js","dependencies":[{"name":"C:\\Users\\pooya\\Desktop\\poomap\\package.json","includedInParent":true,"mtime":1594932269761},{"name":"C:\\Users\\pooya\\Desktop\\poomap\\node_modules\\chardet\\package.json","includedInParent":true,"mtime":1594932268538},{"name":"../match","loc":{"line":2,"column":21},"parent":"C:\\Users\\pooya\\Desktop\\poomap\\node_modules\\chardet\\encoding\\utf8.js","resolved":"C:\\Users\\pooya\\Desktop\\poomap\\node_modules\\chardet\\match.js"}],"generated":{"js":"\nvar Match = require ('../match');\n\n/**\n * Charset recognizer for UTF-8\n */\nmodule.exports = function() {\n  this.name = function() {\n    return 'UTF-8';\n  };\n  this.match = function(det) {\n\n    var hasBOM = false,\n      numValid = 0,\n      numInvalid = 0,\n      input = det.fRawInput,\n      trailBytes = 0,\n      confidence;\n\n    if (det.fRawLength >= 3 &&\n      (input[0] & 0xff) == 0xef && (input[1] & 0xff) == 0xbb && (input[2] & 0xff) == 0xbf) {\n      hasBOM = true;\n    }\n\n    // Scan for multi-byte sequences\n    for (var i = 0; i < det.fRawLength; i++) {\n      var b = input[i];\n      if ((b & 0x80) == 0)\n        continue; // ASCII\n\n      // Hi bit on char found.  Figure out how long the sequence should be\n      if ((b & 0x0e0) == 0x0c0) {\n        trailBytes = 1;\n      } else if ((b & 0x0f0) == 0x0e0) {\n        trailBytes = 2;\n      } else if ((b & 0x0f8) == 0xf0) {\n        trailBytes = 3;\n      } else {\n        numInvalid++;\n        if (numInvalid > 5)\n          break;\n        trailBytes = 0;\n      }\n\n      // Verify that we've got the right number of trail bytes in the sequence\n      for (;;) {\n        i++;\n        if (i >= det.fRawLength)\n          break;\n\n        if ((input[i] & 0xc0) != 0x080) {\n          numInvalid++;\n          break;\n        }\n        if (--trailBytes == 0) {\n          numValid++;\n          break;\n        }\n      }\n    }\n\n    // Cook up some sort of confidence score, based on presense of a BOM\n    //    and the existence of valid and/or invalid multi-byte sequences.\n    confidence = 0;\n    if (hasBOM && numInvalid == 0)\n      confidence = 100;\n    else if (hasBOM && numValid > numInvalid * 10)\n      confidence = 80;\n    else if (numValid > 3 && numInvalid == 0)\n      confidence = 100;\n    else if (numValid > 0 && numInvalid == 0)\n      confidence = 80;\n    else if (numValid == 0 && numInvalid == 0)\n      // Plain ASCII.\n      confidence = 10;\n    else if (numValid > numInvalid * 10)\n      // Probably corruput utf-8 data.  Valid sequences aren't likely by chance.\n      confidence = 25;\n    else\n      return null\n\n    return new Match(det, this, confidence);\n  };\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/chardet/encoding/utf8.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}}],"sources":{"node_modules/chardet/encoding/utf8.js":"\nvar Match = require ('../match');\n\n/**\n * Charset recognizer for UTF-8\n */\nmodule.exports = function() {\n  this.name = function() {\n    return 'UTF-8';\n  };\n  this.match = function(det) {\n\n    var hasBOM = false,\n      numValid = 0,\n      numInvalid = 0,\n      input = det.fRawInput,\n      trailBytes = 0,\n      confidence;\n\n    if (det.fRawLength >= 3 &&\n      (input[0] & 0xff) == 0xef && (input[1] & 0xff) == 0xbb && (input[2] & 0xff) == 0xbf) {\n      hasBOM = true;\n    }\n\n    // Scan for multi-byte sequences\n    for (var i = 0; i < det.fRawLength; i++) {\n      var b = input[i];\n      if ((b & 0x80) == 0)\n        continue; // ASCII\n\n      // Hi bit on char found.  Figure out how long the sequence should be\n      if ((b & 0x0e0) == 0x0c0) {\n        trailBytes = 1;\n      } else if ((b & 0x0f0) == 0x0e0) {\n        trailBytes = 2;\n      } else if ((b & 0x0f8) == 0xf0) {\n        trailBytes = 3;\n      } else {\n        numInvalid++;\n        if (numInvalid > 5)\n          break;\n        trailBytes = 0;\n      }\n\n      // Verify that we've got the right number of trail bytes in the sequence\n      for (;;) {\n        i++;\n        if (i >= det.fRawLength)\n          break;\n\n        if ((input[i] & 0xc0) != 0x080) {\n          numInvalid++;\n          break;\n        }\n        if (--trailBytes == 0) {\n          numValid++;\n          break;\n        }\n      }\n    }\n\n    // Cook up some sort of confidence score, based on presense of a BOM\n    //    and the existence of valid and/or invalid multi-byte sequences.\n    confidence = 0;\n    if (hasBOM && numInvalid == 0)\n      confidence = 100;\n    else if (hasBOM && numValid > numInvalid * 10)\n      confidence = 80;\n    else if (numValid > 3 && numInvalid == 0)\n      confidence = 100;\n    else if (numValid > 0 && numInvalid == 0)\n      confidence = 80;\n    else if (numValid == 0 && numInvalid == 0)\n      // Plain ASCII.\n      confidence = 10;\n    else if (numValid > numInvalid * 10)\n      // Probably corruput utf-8 data.  Valid sequences aren't likely by chance.\n      confidence = 25;\n    else\n      return null\n\n    return new Match(det, this, confidence);\n  };\n};\n"},"lineCount":85}},"error":null,"hash":"9d445b2862628b2f83aa3fcd4c16b1fa","cacheData":{"env":{}}}