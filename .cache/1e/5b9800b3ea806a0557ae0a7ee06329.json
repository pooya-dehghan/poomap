{"id":"node_modules/rxjs/operator/skipUntil.js","dependencies":[{"name":"C:\\Users\\pooya\\Desktop\\poomap\\node_modules\\rxjs\\operator\\skipUntil.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\pooya\\Desktop\\poomap\\package.json","includedInParent":true,"mtime":1594932269761},{"name":"C:\\Users\\pooya\\Desktop\\poomap\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1594932268869},{"name":"../operators/skipUntil","loc":{"line":2,"column":26},"parent":"C:\\Users\\pooya\\Desktop\\poomap\\node_modules\\rxjs\\operator\\skipUntil.js","resolved":"C:\\Users\\pooya\\Desktop\\poomap\\node_modules\\rxjs\\operators\\skipUntil.js"}],"generated":{"js":"\"use strict\";\nvar skipUntil_1 = require('../operators/skipUntil');\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nfunction skipUntil(notifier) {\n    return skipUntil_1.skipUntil(notifier)(this);\n}\nexports.skipUntil = skipUntil;\n"},"sourceMaps":{"js":{"version":3,"file":"skipUntil.js","sourceRoot":"","sources":["../../src/operator/skipUntil.ts"],"names":[],"mappings":";AACA,0BAAyC,wBAAwB,CAAC,CAAA;AAElE;;;;;;;;;;;GAWG;AACH,mBAAkD,QAAyB;IACzE,MAAM,CAAC,qBAAW,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAkB,CAAC;AACtD,CAAC;AAFe,iBAAS,YAExB,CAAA","sourcesContent":["import { Observable } from '../Observable';\nimport { skipUntil as higherOrder } from '../operators/skipUntil';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n"]}},"error":null,"hash":"4c033fe069b2d0dc9cde4f63ca6d8783","cacheData":{"env":{}}}