{"id":"node_modules/glob-to-regexp/index.js","dependencies":[{"name":"C:\\Users\\pooya\\Desktop\\poomap\\package.json","includedInParent":true,"mtime":1594932269761},{"name":"C:\\Users\\pooya\\Desktop\\poomap\\node_modules\\glob-to-regexp\\package.json","includedInParent":true,"mtime":1594932268539}],"generated":{"js":"module.exports = function (glob, opts) {\n  if (typeof glob !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n\n  var str = String(glob);\n\n  // The regexp we are building, as a string.\n  var reStr = \"\";\n\n  // Whether we are matching so called \"extended\" globs (like bash) and should\n  // support single character matching, matching ranges of characters, group\n  // matching, etc.\n  var extended = opts ? !!opts.extended : false;\n\n  // When globstar is _false_ (default), '/foo/*' is translated a regexp like\n  // '^\\/foo\\/.*$' which will match any string beginning with '/foo/'\n  // When globstar is _true_, '/foo/*' is translated to regexp like\n  // '^\\/foo\\/[^/]*$' which will match any string beginning with '/foo/' BUT\n  // which does not have a '/' to the right of it.\n  // E.g. with '/foo/*' these will match: '/foo/bar', '/foo/bar.txt' but\n  // these will not '/foo/bar/baz', '/foo/bar/baz.txt'\n  // Lastely, when globstar is _true_, '/foo/**' is equivelant to '/foo/*' when\n  // globstar is _false_\n  var globstar = opts ? !!opts.globstar : false;\n\n  // If we are doing extended matching, this boolean is true when we are inside\n  // a group (eg {*.html,*.js}), and false otherwise.\n  var inGroup = false;\n\n  // RegExp flags (eg \"i\" ) to pass in to RegExp constructor.\n  var flags = opts && typeof( opts.flags ) === \"string\" ? opts.flags : \"\";\n\n  var c;\n  for (var i = 0, len = str.length; i < len; i++) {\n    c = str[i];\n\n    switch (c) {\n    case \"\\\\\":\n    case \"/\":\n    case \"$\":\n    case \"^\":\n    case \"+\":\n    case \".\":\n    case \"(\":\n    case \")\":\n    case \"=\":\n    case \"!\":\n    case \"|\":\n      reStr += \"\\\\\" + c;\n      break;\n\n    case \"?\":\n      if (extended) {\n        reStr += \".\";\n\t    break;\n      }\n\n    case \"[\":\n    case \"]\":\n      if (extended) {\n        reStr += c;\n\t    break;\n      }\n\n    case \"{\":\n      if (extended) {\n        inGroup = true;\n\t    reStr += \"(\";\n\t    break;\n      }\n\n    case \"}\":\n      if (extended) {\n        inGroup = false;\n\t    reStr += \")\";\n\t    break;\n      }\n\n    case \",\":\n      if (inGroup) {\n        reStr += \"|\";\n\t    break;\n      }\n      reStr += \"\\\\\" + c;\n      break;\n\n    case \"*\":\n      // Move over all consecutive \"*\"'s.\n      // Also store the previous and next characters\n      var prevChar = str[i - 1];\n      var starCount = 1;\n      while(str[i + 1] === \"*\") {\n        starCount++;\n        i++;\n      }\n      var nextChar = str[i + 1];\n\n      if (!globstar) {\n        // globstar is disabled, so treat any number of \"*\" as one\n        reStr += \".*\";\n      } else {\n        // globstar is enabled, so determine if this is a globstar segment\n        var isGlobstar = starCount > 1                      // multiple \"*\"'s\n          && (prevChar === \"/\" || prevChar === undefined)   // from the start of the segment\n          && (nextChar === \"/\" || nextChar === undefined)   // to the end of the segment\n\n        if (isGlobstar) {\n          // it's a globstar, so match zero or more path segments\n          reStr += \"(?:[^/]*(?:\\/|$))*\";\n          i++; // move over the \"/\"\n        } else {\n          // it's not a globstar, so only match one path segment\n          reStr += \"[^/]*\";\n        }\n      }\n      break;\n\n    default:\n      reStr += c;\n    }\n  }\n\n  // When regexp 'g' flag is specified don't\n  // constrain the regular expression with ^ & $\n  if (!flags || !~flags.indexOf('g')) {\n    reStr = \"^\" + reStr + \"$\";\n  }\n\n  return new RegExp(reStr, flags);\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/glob-to-regexp/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/glob-to-regexp/index.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}}],"sources":{"node_modules/glob-to-regexp/index.js":"module.exports = function (glob, opts) {\n  if (typeof glob !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n\n  var str = String(glob);\n\n  // The regexp we are building, as a string.\n  var reStr = \"\";\n\n  // Whether we are matching so called \"extended\" globs (like bash) and should\n  // support single character matching, matching ranges of characters, group\n  // matching, etc.\n  var extended = opts ? !!opts.extended : false;\n\n  // When globstar is _false_ (default), '/foo/*' is translated a regexp like\n  // '^\\/foo\\/.*$' which will match any string beginning with '/foo/'\n  // When globstar is _true_, '/foo/*' is translated to regexp like\n  // '^\\/foo\\/[^/]*$' which will match any string beginning with '/foo/' BUT\n  // which does not have a '/' to the right of it.\n  // E.g. with '/foo/*' these will match: '/foo/bar', '/foo/bar.txt' but\n  // these will not '/foo/bar/baz', '/foo/bar/baz.txt'\n  // Lastely, when globstar is _true_, '/foo/**' is equivelant to '/foo/*' when\n  // globstar is _false_\n  var globstar = opts ? !!opts.globstar : false;\n\n  // If we are doing extended matching, this boolean is true when we are inside\n  // a group (eg {*.html,*.js}), and false otherwise.\n  var inGroup = false;\n\n  // RegExp flags (eg \"i\" ) to pass in to RegExp constructor.\n  var flags = opts && typeof( opts.flags ) === \"string\" ? opts.flags : \"\";\n\n  var c;\n  for (var i = 0, len = str.length; i < len; i++) {\n    c = str[i];\n\n    switch (c) {\n    case \"\\\\\":\n    case \"/\":\n    case \"$\":\n    case \"^\":\n    case \"+\":\n    case \".\":\n    case \"(\":\n    case \")\":\n    case \"=\":\n    case \"!\":\n    case \"|\":\n      reStr += \"\\\\\" + c;\n      break;\n\n    case \"?\":\n      if (extended) {\n        reStr += \".\";\n\t    break;\n      }\n\n    case \"[\":\n    case \"]\":\n      if (extended) {\n        reStr += c;\n\t    break;\n      }\n\n    case \"{\":\n      if (extended) {\n        inGroup = true;\n\t    reStr += \"(\";\n\t    break;\n      }\n\n    case \"}\":\n      if (extended) {\n        inGroup = false;\n\t    reStr += \")\";\n\t    break;\n      }\n\n    case \",\":\n      if (inGroup) {\n        reStr += \"|\";\n\t    break;\n      }\n      reStr += \"\\\\\" + c;\n      break;\n\n    case \"*\":\n      // Move over all consecutive \"*\"'s.\n      // Also store the previous and next characters\n      var prevChar = str[i - 1];\n      var starCount = 1;\n      while(str[i + 1] === \"*\") {\n        starCount++;\n        i++;\n      }\n      var nextChar = str[i + 1];\n\n      if (!globstar) {\n        // globstar is disabled, so treat any number of \"*\" as one\n        reStr += \".*\";\n      } else {\n        // globstar is enabled, so determine if this is a globstar segment\n        var isGlobstar = starCount > 1                      // multiple \"*\"'s\n          && (prevChar === \"/\" || prevChar === undefined)   // from the start of the segment\n          && (nextChar === \"/\" || nextChar === undefined)   // to the end of the segment\n\n        if (isGlobstar) {\n          // it's a globstar, so match zero or more path segments\n          reStr += \"(?:[^/]*(?:\\/|$))*\";\n          i++; // move over the \"/\"\n        } else {\n          // it's not a globstar, so only match one path segment\n          reStr += \"[^/]*\";\n        }\n      }\n      break;\n\n    default:\n      reStr += c;\n    }\n  }\n\n  // When regexp 'g' flag is specified don't\n  // constrain the regular expression with ^ & $\n  if (!flags || !~flags.indexOf('g')) {\n    reStr = \"^\" + reStr + \"$\";\n  }\n\n  return new RegExp(reStr, flags);\n};\n"},"lineCount":132}},"error":null,"hash":"08d949a6f0759cbfc036a7b7d18c2f61","cacheData":{"env":{}}}