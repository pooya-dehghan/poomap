{"id":"node_modules/chardet/encoding/unicode.js","dependencies":[{"name":"C:\\Users\\pooya\\Desktop\\poomap\\package.json","includedInParent":true,"mtime":1594932269761},{"name":"C:\\Users\\pooya\\Desktop\\poomap\\node_modules\\chardet\\package.json","includedInParent":true,"mtime":1594932268538},{"name":"util","loc":{"line":2,"column":19},"parent":"C:\\Users\\pooya\\Desktop\\poomap\\node_modules\\chardet\\encoding\\unicode.js","resolved":"C:\\Users\\pooya\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\node_modules\\util\\util.js"},{"name":"../match","loc":{"line":3,"column":19},"parent":"C:\\Users\\pooya\\Desktop\\poomap\\node_modules\\chardet\\encoding\\unicode.js","resolved":"C:\\Users\\pooya\\Desktop\\poomap\\node_modules\\chardet\\match.js"}],"generated":{"js":"'use strict';\nvar util = require('util'),\n  Match = require ('../match');\n\n/**\n * This class matches UTF-16 and UTF-32, both big- and little-endian. The\n * BOM will be used if it is present.\n */\nmodule.exports.UTF_16BE = function() {\n  this.name = function() {\n    return 'UTF-16BE';\n  };\n  this.match = function(det) {\n    var input = det.fRawInput;\n\n    if (input.length >= 2 && ((input[0] & 0xff) == 0xfe && (input[1] & 0xff) == 0xff)) {\n      return new Match(det, this, 100); // confidence = 100\n    }\n\n    // TODO: Do some statistics to check for unsigned UTF-16BE\n    return null;\n  };\n};\n\nmodule.exports.UTF_16LE = function() {\n  this.name = function() {\n    return 'UTF-16LE';\n  };\n  this.match = function(det) {\n    var input = det.fRawInput;\n\n    if (input.length >= 2 && ((input[0] & 0xff) == 0xff && (input[1] & 0xff) == 0xfe)) {\n      // LE BOM is present.\n      if (input.length >= 4 && input[2] == 0x00 && input[3] == 0x00) {\n        // It is probably UTF-32 LE, not UTF-16\n        return null;\n      }\n      return new Match(det, this, 100); // confidence = 100\n    }\n\n    // TODO: Do some statistics to check for unsigned UTF-16LE\n    return null;\n  }\n};\n\nfunction UTF_32() {};\nUTF_32.prototype.match = function(det) {\n  var input      = det.fRawInput,\n    limit      = (det.fRawLength / 4) * 4,\n    numValid   = 0,\n    numInvalid = 0,\n    hasBOM     = false,\n    confidence = 0;\n\n  if (limit == 0) {\n    return null;\n  }\n\n  if (this.getChar(input, 0) == 0x0000FEFF) {\n    hasBOM = true;\n  }\n\n  for (var i = 0; i < limit; i += 4) {\n    var ch = this.getChar(input, i);\n\n    if (ch < 0 || ch >= 0x10FFFF || (ch >= 0xD800 && ch <= 0xDFFF)) {\n      numInvalid += 1;\n    } else {\n      numValid += 1;\n    }\n  }\n\n  // Cook up some sort of confidence score, based on presence of a BOM\n  //    and the existence of valid and/or invalid multi-byte sequences.\n  if (hasBOM && numInvalid == 0) {\n    confidence = 100;\n  } else if (hasBOM && numValid > numInvalid * 10) {\n    confidence = 80;\n  } else if (numValid > 3 && numInvalid == 0) {\n    confidence = 100;\n  } else if (numValid > 0 && numInvalid == 0) {\n    confidence = 80;\n  } else if (numValid > numInvalid * 10) {\n    // Probably corrupt UTF-32BE data.  Valid sequences aren't likely by chance.\n    confidence = 25;\n  }\n\n  // return confidence == 0 ? null : new CharsetMatch(det, this, confidence);\n  return confidence == 0 ? null : new Match(det, this, confidence);\n};\n\nmodule.exports.UTF_32BE = function() {\n  this.name = function() {\n    return 'UTF-32BE';\n  };\n  this.getChar = function(input, index) {\n    return (input[index + 0] & 0xff) << 24 | (input[index + 1] & 0xff) << 16 |\n         (input[index + 2] & 0xff) <<  8 | (input[index + 3] & 0xff);\n  };\n};\nutil.inherits(module.exports.UTF_32BE, UTF_32);\n\nmodule.exports.UTF_32LE = function() {\n  this.name = function() {\n    return 'UTF-32LE';\n  };\n  this.getChar = function(input, index) {\n    return (input[index + 3] & 0xff) << 24 | (input[index + 2] & 0xff) << 16 |\n         (input[index + 1] & 0xff) <<  8 | (input[index + 0] & 0xff);\n  };\n};\nutil.inherits(module.exports.UTF_32LE, UTF_32);\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/chardet/encoding/unicode.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}}],"sources":{"node_modules/chardet/encoding/unicode.js":"'use strict';\nvar util = require('util'),\n  Match = require ('../match');\n\n/**\n * This class matches UTF-16 and UTF-32, both big- and little-endian. The\n * BOM will be used if it is present.\n */\nmodule.exports.UTF_16BE = function() {\n  this.name = function() {\n    return 'UTF-16BE';\n  };\n  this.match = function(det) {\n    var input = det.fRawInput;\n\n    if (input.length >= 2 && ((input[0] & 0xff) == 0xfe && (input[1] & 0xff) == 0xff)) {\n      return new Match(det, this, 100); // confidence = 100\n    }\n\n    // TODO: Do some statistics to check for unsigned UTF-16BE\n    return null;\n  };\n};\n\nmodule.exports.UTF_16LE = function() {\n  this.name = function() {\n    return 'UTF-16LE';\n  };\n  this.match = function(det) {\n    var input = det.fRawInput;\n\n    if (input.length >= 2 && ((input[0] & 0xff) == 0xff && (input[1] & 0xff) == 0xfe)) {\n      // LE BOM is present.\n      if (input.length >= 4 && input[2] == 0x00 && input[3] == 0x00) {\n        // It is probably UTF-32 LE, not UTF-16\n        return null;\n      }\n      return new Match(det, this, 100); // confidence = 100\n    }\n\n    // TODO: Do some statistics to check for unsigned UTF-16LE\n    return null;\n  }\n};\n\nfunction UTF_32() {};\nUTF_32.prototype.match = function(det) {\n  var input      = det.fRawInput,\n    limit      = (det.fRawLength / 4) * 4,\n    numValid   = 0,\n    numInvalid = 0,\n    hasBOM     = false,\n    confidence = 0;\n\n  if (limit == 0) {\n    return null;\n  }\n\n  if (this.getChar(input, 0) == 0x0000FEFF) {\n    hasBOM = true;\n  }\n\n  for (var i = 0; i < limit; i += 4) {\n    var ch = this.getChar(input, i);\n\n    if (ch < 0 || ch >= 0x10FFFF || (ch >= 0xD800 && ch <= 0xDFFF)) {\n      numInvalid += 1;\n    } else {\n      numValid += 1;\n    }\n  }\n\n  // Cook up some sort of confidence score, based on presence of a BOM\n  //    and the existence of valid and/or invalid multi-byte sequences.\n  if (hasBOM && numInvalid == 0) {\n    confidence = 100;\n  } else if (hasBOM && numValid > numInvalid * 10) {\n    confidence = 80;\n  } else if (numValid > 3 && numInvalid == 0) {\n    confidence = 100;\n  } else if (numValid > 0 && numInvalid == 0) {\n    confidence = 80;\n  } else if (numValid > numInvalid * 10) {\n    // Probably corrupt UTF-32BE data.  Valid sequences aren't likely by chance.\n    confidence = 25;\n  }\n\n  // return confidence == 0 ? null : new CharsetMatch(det, this, confidence);\n  return confidence == 0 ? null : new Match(det, this, confidence);\n};\n\nmodule.exports.UTF_32BE = function() {\n  this.name = function() {\n    return 'UTF-32BE';\n  };\n  this.getChar = function(input, index) {\n    return (input[index + 0] & 0xff) << 24 | (input[index + 1] & 0xff) << 16 |\n         (input[index + 2] & 0xff) <<  8 | (input[index + 3] & 0xff);\n  };\n};\nutil.inherits(module.exports.UTF_32BE, UTF_32);\n\nmodule.exports.UTF_32LE = function() {\n  this.name = function() {\n    return 'UTF-32LE';\n  };\n  this.getChar = function(input, index) {\n    return (input[index + 3] & 0xff) << 24 | (input[index + 2] & 0xff) << 16 |\n         (input[index + 1] & 0xff) <<  8 | (input[index + 0] & 0xff);\n  };\n};\nutil.inherits(module.exports.UTF_32LE, UTF_32);\n"},"lineCount":113}},"error":null,"hash":"9bfa86bbd95238d425921c83bd29e6f7","cacheData":{"env":{}}}