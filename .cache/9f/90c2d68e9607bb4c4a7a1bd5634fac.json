{"id":"node_modules/rxjs/operator/publish.js","dependencies":[{"name":"C:\\Users\\pooya\\Desktop\\poomap\\node_modules\\rxjs\\operator\\publish.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\pooya\\Desktop\\poomap\\package.json","includedInParent":true,"mtime":1594932269761},{"name":"C:\\Users\\pooya\\Desktop\\poomap\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1594932268869},{"name":"../operators/publish","loc":{"line":2,"column":24},"parent":"C:\\Users\\pooya\\Desktop\\poomap\\node_modules\\rxjs\\operator\\publish.js","resolved":"C:\\Users\\pooya\\Desktop\\poomap\\node_modules\\rxjs\\operators\\publish.js"}],"generated":{"js":"\"use strict\";\nvar publish_1 = require('../operators/publish');\n/* tslint:enable:max-line-length */\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nfunction publish(selector) {\n    return publish_1.publish(selector)(this);\n}\nexports.publish = publish;\n"},"sourceMaps":{"js":{"version":3,"file":"publish.js","sourceRoot":"","sources":["../../src/operator/publish.ts"],"names":[],"mappings":";AAGA,wBAAuC,sBAAsB,CAAC,CAAA;AAM9D,mCAAmC;AAEnC;;;;;;;;;;;;GAYG;AACH,iBAAmD,QAAmD;IACpG,MAAM,CAAC,iBAAW,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC;AACrC,CAAC;AAFe,eAAO,UAEtB,CAAA","sourcesContent":["\nimport { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publish as higherOrder } from '../operators/publish';\n\n/* tslint:disable:max-line-length */\nexport function publish<T>(this: Observable<T>): ConnectableObservable<T>;\nexport function publish<T>(this: Observable<T>, selector: (source: Observable<T>) => Observable<T>): Observable<T>;\nexport function publish<T, R>(this: Observable<T>, selector: (source: Observable<T>) => Observable<R>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish<T, R>(this: Observable<T>, selector?: (source: Observable<T>) => Observable<R>): Observable<R> | ConnectableObservable<R> {\n  return higherOrder(selector)(this);\n}\n\nexport type selector<T> = (source: Observable<T>) => Observable<T>;\n"]}},"error":null,"hash":"b9ee644c94522bb4757e61ce52eae0fa","cacheData":{"env":{}}}