{"id":"node_modules/fs-extra/lib/ensure/symlink-paths.js","dependencies":[{"name":"C:\\Users\\pooya\\Desktop\\poomap\\package.json","includedInParent":true,"mtime":1594932269761},{"name":"C:\\Users\\pooya\\Desktop\\poomap\\node_modules\\fs-extra\\package.json","includedInParent":true,"mtime":1594932268730},{"name":"path","loc":{"line":3,"column":21},"parent":"C:\\Users\\pooya\\Desktop\\poomap\\node_modules\\fs-extra\\lib\\ensure\\symlink-paths.js","resolved":"C:\\Users\\pooya\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\node_modules\\path-browserify\\index.js"},{"name":"graceful-fs","loc":{"line":4,"column":19},"parent":"C:\\Users\\pooya\\Desktop\\poomap\\node_modules\\fs-extra\\lib\\ensure\\symlink-paths.js","resolved":"C:\\Users\\pooya\\Desktop\\poomap\\node_modules\\graceful-fs\\graceful-fs.js"},{"name":"../path-exists","loc":{"line":5,"column":27},"parent":"C:\\Users\\pooya\\Desktop\\poomap\\node_modules\\fs-extra\\lib\\ensure\\symlink-paths.js","resolved":"C:\\Users\\pooya\\Desktop\\poomap\\node_modules\\fs-extra\\lib\\path-exists\\index.js"}],"generated":{"js":"'use strict'\n\nconst path = require('path')\nconst fs = require('graceful-fs')\nconst pathExists = require('../path-exists').pathExists\n\n/**\n * Function that returns two types of paths, one relative to symlink, and one\n * relative to the current working directory. Checks if path is absolute or\n * relative. If the path is relative, this function checks if the path is\n * relative to symlink or relative to current working directory. This is an\n * initiative to find a smarter `srcpath` to supply when building symlinks.\n * This allows you to determine which path to use out of one of three possible\n * types of source paths. The first is an absolute path. This is detected by\n * `path.isAbsolute()`. When an absolute path is provided, it is checked to\n * see if it exists. If it does it's used, if not an error is returned\n * (callback)/ thrown (sync). The other two options for `srcpath` are a\n * relative url. By default Node's `fs.symlink` works by creating a symlink\n * using `dstpath` and expects the `srcpath` to be relative to the newly\n * created symlink. If you provide a `srcpath` that does not exist on the file\n * system it results in a broken symlink. To minimize this, the function\n * checks to see if the 'relative to symlink' source file exists, and if it\n * does it will use it. If it does not, it checks if there's a file that\n * exists that is relative to the current working directory, if does its used.\n * This preserves the expectations of the original fs.symlink spec and adds\n * the ability to pass in `relative to current working direcotry` paths.\n */\n\nfunction symlinkPaths (srcpath, dstpath, callback) {\n  if (path.isAbsolute(srcpath)) {\n    return fs.lstat(srcpath, (err, stat) => {\n      if (err) {\n        err.message = err.message.replace('lstat', 'ensureSymlink')\n        return callback(err)\n      }\n      return callback(null, {\n        'toCwd': srcpath,\n        'toDst': srcpath\n      })\n    })\n  } else {\n    const dstdir = path.dirname(dstpath)\n    const relativeToDst = path.join(dstdir, srcpath)\n    return pathExists(relativeToDst, (err, exists) => {\n      if (err) return callback(err)\n      if (exists) {\n        return callback(null, {\n          'toCwd': relativeToDst,\n          'toDst': srcpath\n        })\n      } else {\n        return fs.lstat(srcpath, (err, stat) => {\n          if (err) {\n            err.message = err.message.replace('lstat', 'ensureSymlink')\n            return callback(err)\n          }\n          return callback(null, {\n            'toCwd': srcpath,\n            'toDst': path.relative(dstdir, srcpath)\n          })\n        })\n      }\n    })\n  }\n}\n\nfunction symlinkPathsSync (srcpath, dstpath) {\n  let exists\n  if (path.isAbsolute(srcpath)) {\n    exists = fs.existsSync(srcpath)\n    if (!exists) throw new Error('absolute srcpath does not exist')\n    return {\n      'toCwd': srcpath,\n      'toDst': srcpath\n    }\n  } else {\n    const dstdir = path.dirname(dstpath)\n    const relativeToDst = path.join(dstdir, srcpath)\n    exists = fs.existsSync(relativeToDst)\n    if (exists) {\n      return {\n        'toCwd': relativeToDst,\n        'toDst': srcpath\n      }\n    } else {\n      exists = fs.existsSync(srcpath)\n      if (!exists) throw new Error('relative srcpath does not exist')\n      return {\n        'toCwd': srcpath,\n        'toDst': path.relative(dstdir, srcpath)\n      }\n    }\n  }\n}\n\nmodule.exports = {\n  symlinkPaths,\n  symlinkPathsSync\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/fs-extra/lib/ensure/symlink-paths.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}}],"sources":{"node_modules/fs-extra/lib/ensure/symlink-paths.js":"'use strict'\n\nconst path = require('path')\nconst fs = require('graceful-fs')\nconst pathExists = require('../path-exists').pathExists\n\n/**\n * Function that returns two types of paths, one relative to symlink, and one\n * relative to the current working directory. Checks if path is absolute or\n * relative. If the path is relative, this function checks if the path is\n * relative to symlink or relative to current working directory. This is an\n * initiative to find a smarter `srcpath` to supply when building symlinks.\n * This allows you to determine which path to use out of one of three possible\n * types of source paths. The first is an absolute path. This is detected by\n * `path.isAbsolute()`. When an absolute path is provided, it is checked to\n * see if it exists. If it does it's used, if not an error is returned\n * (callback)/ thrown (sync). The other two options for `srcpath` are a\n * relative url. By default Node's `fs.symlink` works by creating a symlink\n * using `dstpath` and expects the `srcpath` to be relative to the newly\n * created symlink. If you provide a `srcpath` that does not exist on the file\n * system it results in a broken symlink. To minimize this, the function\n * checks to see if the 'relative to symlink' source file exists, and if it\n * does it will use it. If it does not, it checks if there's a file that\n * exists that is relative to the current working directory, if does its used.\n * This preserves the expectations of the original fs.symlink spec and adds\n * the ability to pass in `relative to current working direcotry` paths.\n */\n\nfunction symlinkPaths (srcpath, dstpath, callback) {\n  if (path.isAbsolute(srcpath)) {\n    return fs.lstat(srcpath, (err, stat) => {\n      if (err) {\n        err.message = err.message.replace('lstat', 'ensureSymlink')\n        return callback(err)\n      }\n      return callback(null, {\n        'toCwd': srcpath,\n        'toDst': srcpath\n      })\n    })\n  } else {\n    const dstdir = path.dirname(dstpath)\n    const relativeToDst = path.join(dstdir, srcpath)\n    return pathExists(relativeToDst, (err, exists) => {\n      if (err) return callback(err)\n      if (exists) {\n        return callback(null, {\n          'toCwd': relativeToDst,\n          'toDst': srcpath\n        })\n      } else {\n        return fs.lstat(srcpath, (err, stat) => {\n          if (err) {\n            err.message = err.message.replace('lstat', 'ensureSymlink')\n            return callback(err)\n          }\n          return callback(null, {\n            'toCwd': srcpath,\n            'toDst': path.relative(dstdir, srcpath)\n          })\n        })\n      }\n    })\n  }\n}\n\nfunction symlinkPathsSync (srcpath, dstpath) {\n  let exists\n  if (path.isAbsolute(srcpath)) {\n    exists = fs.existsSync(srcpath)\n    if (!exists) throw new Error('absolute srcpath does not exist')\n    return {\n      'toCwd': srcpath,\n      'toDst': srcpath\n    }\n  } else {\n    const dstdir = path.dirname(dstpath)\n    const relativeToDst = path.join(dstdir, srcpath)\n    exists = fs.existsSync(relativeToDst)\n    if (exists) {\n      return {\n        'toCwd': relativeToDst,\n        'toDst': srcpath\n      }\n    } else {\n      exists = fs.existsSync(srcpath)\n      if (!exists) throw new Error('relative srcpath does not exist')\n      return {\n        'toCwd': srcpath,\n        'toDst': path.relative(dstdir, srcpath)\n      }\n    }\n  }\n}\n\nmodule.exports = {\n  symlinkPaths,\n  symlinkPathsSync\n}\n"},"lineCount":100}},"error":null,"hash":"e64725105b27c46166dbeb5c35553151","cacheData":{"env":{}}}